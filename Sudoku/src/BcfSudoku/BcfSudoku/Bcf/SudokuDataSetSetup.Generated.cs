//---------------------------------------------------------------------------------
// <auto-generated>
//    Code was generated by CalculationWorks BCF Editor 
//    http://www.calculationworks.com/
//
//    Manual changes to this file will be overwritten when the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------
using BcfSudoku.Bcf;
using CalculationWorks.BusinessModel;
using System;
using System.Collections.Generic;
using System.Linq;
using CalculationWorks.BusinessModel.Design;
namespace BcfSudoku.Bcf {
    partial class SudokuDataSetSetup : CalculationWorks.BusinessModel.Design.BcfDataSetSetup {
        public SudokuDataSetSetup() {
            InitSetup(this);
            Initialized();
        }
        partial void Initialized();
        private static void InitSetup(SudokuDataSetSetup dss) {
            dss.Name = "Sudoku";
            dss.Tables = new System.Collections.Generic.List<CalculationWorks.BusinessModel.Design.BcfTableSetup>() {
                new CalculationWorks.BusinessModel.Design.BcfTableSetup<SudokuTableOptions>() {
                    Name = "Cell",
                    Columns = new System.Collections.Generic.List<CalculationWorks.BusinessModel.Design.BcfColumnSetup>() {
                        new BcfNotNullableValueTypeColumnSetup<int,SudokuColumnOptions>() {
                            Name = "Value",
                            DefaultValue = default(int),
                        },
                        new BcfNotNullableValueTypeColumnSetup<int,SudokuColumnOptions>() {
                            Name = "AllowedValues",
                            DefaultValue = default(int),
                            Function = new BcfFunctionSetup<int>() { 
                                Func = CellTableAllowedValuesFunction, 
                                Parameters = new List<CalculationWorks.BusinessModel.Design.BcfParameterSetup>() {
                                    new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int> {
                                        Name = "value", 
                                        ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("Value"),
                                    },
                                    new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int> {
                                        Name = "clusterMissingValues", 
                                        ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("MissingValues", new CalculationWorks.BusinessModel.Design.BcfRelationStep(false, "CellLink", false), new CalculationWorks.BusinessModel.Design.BcfRelationStep(true, "ClusterLink", false)),
                                    },
                                },
                            },
                        },
                    },
                    Rules = new System.Collections.Generic.List<CalculationWorks.BusinessModel.Design.BcfRuleSetup>() {
						new CalculationWorks.BusinessModel.Design.BcfRuleSetup<SudokuRuleOptions>() {
                            Func = CellTable0Rule,
                            Parameters = new List<CalculationWorks.BusinessModel.Design.BcfParameterSetup>() {
                                new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int> {
                                    Name = "value", 
                                    ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("Value"),
                                },
                                new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int> {
                                    Name = "allowedValues", 
                                    ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("AllowedValues"),
                                },
                            },
                        },
                    },
                },
                new CalculationWorks.BusinessModel.Design.BcfTableSetup<SudokuTableOptions>() {
                    Name = "Cluster",
                    Columns = new System.Collections.Generic.List<CalculationWorks.BusinessModel.Design.BcfColumnSetup>() {
                        new BcfNotNullableValueTypeColumnSetup<int,SudokuColumnOptions>() {
                            Name = "MissingValues",
                            DefaultValue = default(int),
                            Function = new BcfFunctionSetup<int>() { 
                                Func = ClusterTableMissingValuesFunction, 
                                Parameters = new List<CalculationWorks.BusinessModel.Design.BcfParameterSetup>() {
                                    new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int> {
                                        Name = "cellValues", 
                                        ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("Value", new CalculationWorks.BusinessModel.Design.BcfRelationStep(false, "ClusterLink", false), new CalculationWorks.BusinessModel.Design.BcfRelationStep(true, "CellLink", false)),
                                    },
                                },
                            },
                        },
                        new BcfReferenceTypeColumnSetup<int[],SudokuColumnOptions>() {
                            Name = "MissingValuesArray",
                            DefaultValue = BcfArrayHelper.Empty<int>(),
                            ContentEqualityComparison = BcfReadOnlyListContentComparison<int>.FromItemComparison(),
                            Function = new BcfFunctionSetup<int[]>() { 
                                Func = ClusterTableMissingValuesArrayFunction, 
                                Parameters = new List<CalculationWorks.BusinessModel.Design.BcfParameterSetup>() {
                                    new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int> {
                                        Name = "missingValues", 
                                        ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("MissingValues"),
                                    },
                                },
                            },
                        },
                        new BcfReferenceTypeColumnSetup<int[],SudokuColumnOptions>() {
                            Name = "MissingValuesTargetCount",
                            DefaultValue = BcfArrayHelper.Empty<int>(),
                            ContentEqualityComparison = BcfReadOnlyListContentComparison<int>.FromItemComparison(),
                            Function = new BcfFunctionSetup<int[]>() { 
                                Func = ClusterTableMissingValuesTargetCountFunction, 
                                Parameters = new List<CalculationWorks.BusinessModel.Design.BcfParameterSetup>() {
                                    new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int[]> {
                                        Name = "missingValuesArray", 
                                        ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("MissingValuesArray"),
                                    },
                                    new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int> {
                                        Name = "allowed", 
                                        ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("AllowedValues", new CalculationWorks.BusinessModel.Design.BcfRelationStep(false, "ClusterLink", false), new CalculationWorks.BusinessModel.Design.BcfRelationStep(true, "CellLink", false)),
                                    },
                                },
                            },
                        },
                    },
                    Rules = new System.Collections.Generic.List<CalculationWorks.BusinessModel.Design.BcfRuleSetup>() {
						new CalculationWorks.BusinessModel.Design.BcfRuleSetup<SudokuRuleOptions>() {
                            Func = ClusterTable0Rule,
                            Parameters = new List<CalculationWorks.BusinessModel.Design.BcfParameterSetup>() {
                                new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int[]> {
                                    Name = "missingValuesArray", 
                                    ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("MissingValuesArray"),
                                },
                                new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int[]> {
                                    Name = "missingValuesTargetCount", 
                                    ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("MissingValuesTargetCount"),
                                },
                                new CalculationWorks.BusinessModel.Design.BcfLinkedParameterSetup<int> {
                                    Name = "cellValues", 
                                    ParameterAccessPath = new CalculationWorks.BusinessModel.Design.BcfParameterAccessPath("Value", new CalculationWorks.BusinessModel.Design.BcfRelationStep(false, "ClusterLink", false), new CalculationWorks.BusinessModel.Design.BcfRelationStep(true, "CellLink", false)),
                                },
                            },
                        },
                    },
                },
                new CalculationWorks.BusinessModel.Design.BcfTableSetup<SudokuTableOptions>() {
                    Name = "Link",
                },
            };
            dss.Relations = new System.Collections.Generic.List<CalculationWorks.BusinessModel.Design.BcfRelationSetup>() {
				new CalculationWorks.BusinessModel.Design.BcfRelationSetup<SudokuRelationOptions>() { 
                    Name = "ClusterLink", 
                    ParentTable = "Cluster", 
                    ChildTable = "Link", 
                    UpdateRule = BcfRelationRule.NoAction, 
                    DeleteRule = BcfRelationRule.NoAction,
                    HasParentEndNotNullConstraint = true,
                    ChildEndMinConstraint = 9,
                    ChildEndMaxConstraint = 9,
                },
				new CalculationWorks.BusinessModel.Design.BcfRelationSetup<SudokuRelationOptions>() { 
                    Name = "CellLink", 
                    ParentTable = "Cell", 
                    ChildTable = "Link", 
                    UpdateRule = BcfRelationRule.NoAction, 
                    DeleteRule = BcfRelationRule.NoAction,
                    HasParentEndNotNullConstraint = true,
                    ChildEndMinConstraint = 3,
                },
            };
        }
		private static readonly BcfFunc<int> CellTableAllowedValuesFunction = (parameters, row) => 
            CellTableAllowedValuesFunctionBcf(
                ((IBcfParameter<int>)parameters[0]).GetValueUnchecked(row),
                ((IBcfParameter<int>)parameters[1]).GetValueEnumerableUnchecked(row));
        private static int CellTableAllowedValuesFunctionBcf(int value, IEnumerable<int> clusterMissingValues) { return Util.GetCellAllowedValues(value, clusterMissingValues); }
		private static readonly BcfFunc<int> ClusterTableMissingValuesFunction = (parameters, row) => 
            ClusterTableMissingValuesFunctionBcf(((IBcfParameter<int>)parameters[0]).GetValueEnumerableUnchecked(row));
        private static int ClusterTableMissingValuesFunctionBcf(IEnumerable<int> cellValues) { return Util.GetClusterMissingValues(cellValues); }
		private static readonly BcfFunc<int[]> ClusterTableMissingValuesArrayFunction = (parameters, row) => 
            ClusterTableMissingValuesArrayFunctionBcf(((IBcfParameter<int>)parameters[0]).GetValueUnchecked(row));
        private static int[] ClusterTableMissingValuesArrayFunctionBcf(int missingValues) { return Util.BitRegister[missingValues]; }
		private static readonly BcfFunc<int[]> ClusterTableMissingValuesTargetCountFunction = (parameters, row) => 
            ClusterTableMissingValuesTargetCountFunctionBcf(
                ((IBcfParameter<int[]>)parameters[0]).GetValueUnchecked(row),
                ((IBcfParameter<int>)parameters[1]).GetValueArrayUnchecked(row));
        private static int[] ClusterTableMissingValuesTargetCountFunctionBcf(int[] missingValuesArray, int[] allowed) { return Util.GetClusterMissingValuesTargetCount(missingValuesArray, allowed); }
		private static readonly BcfFunc<BcfFaultMessage> CellTable0Rule = (parameters, row) => 
            CellTable0RuleBcf(
                ((IBcfParameter<int>)parameters[0]).GetValueUnchecked(row),
                ((IBcfParameter<int>)parameters[1]).GetValueUnchecked(row));
        private static BcfFaultMessage CellTable0RuleBcf(int value, int allowedValues) { return (value == 0 && allowedValues == 0) ? new BcfFaultMessage("cell not solvable") : null; }
		private static readonly BcfFunc<BcfFaultMessage> ClusterTable0Rule = (parameters, row) => 
            ClusterTable0RuleBcf(
                ((IBcfParameter<int[]>)parameters[0]).GetValueUnchecked(row),
                ((IBcfParameter<int[]>)parameters[1]).GetValueUnchecked(row),
                ((IBcfParameter<int>)parameters[2]).GetValueEnumerableUnchecked(row));
        private static BcfFaultMessage ClusterTable0RuleBcf(int[] missingValuesArray, int[] missingValuesTargetCount, IEnumerable<int> cellValues) { return Util.ClusterIsValid(missingValuesArray, missingValuesTargetCount, cellValues); }
    }
}
